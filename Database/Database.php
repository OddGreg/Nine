<?php namespace Nine\Database;

/**
 * F9 (Formula 9) Personal PHP Framework
 *
 * Copyright (c) 2010-2016, Greg Truesdell (<odd.greg@gmail.com>)
 * License: MIT (reference: https://opensource.org/licenses/MIT)
 *
 * Acknowledgements:
 *  - The code provided in this file (and in the Framework in general) may include
 * open sourced software licensed for the purpose, refactored code from related
 * packages, or snippets/methods found on sites throughout the internet.
 *  - All originator copyrights remain in force where applicable, as well as their
 *  licenses where obtainable.
 *
 * @package Nine
 * @version 0.4.2
 * @author  Greg Truesdell <odd.greg@gmail.com>
 */

use Aura\Sql\ExtendedPdo;
use Nine\Collections\Collection;
use PDO;

/**
 * **Database encapsulates PDO and Aura ExtendedPdo.**
 */
class Database implements DatabaseInterface
{
    /** @var string - the current Data Source Name */
    protected $currentDSN;

    /** @var array */
    private $dbConfig;

    /** @var string */
    private $dbDefault;

    /** @var int $dbFetch */
    private $dbFetch;

    /** @var PDO */
    protected static $dbPDO;

    /**
     * **Construct the database classes based on the settings generated by
     * DatabaseServiceProvider.**
     *
     * @param $dbConfig - an array of database configurations (see config/database.php)
     *
     * @see DatabaseServiceProvider
     */
    public function __construct($dbConfig)
    {
        $this->dbConfig = $dbConfig;
        $this->dbFetch = $this->dbConfig['fetch'];
        $this->dbDefault = $dbConfig['connections'][$this->dbConfig['default']];

        static::$dbPDO = $this->bootPDO();
    }

    /**
     * **Boots the PDO using the Aura ExtendedPdo enhancement package.**
     *
     * @return \Aura\Sql\ExtendedPdo|null|PDO
     */
    public function bootPDO()
    {
        $default = $this->dbDefault;

        if ($default['driver'] === 'sqlite') {

            $this->currentDSN = "{$default['driver']}:{$default['database']}";
            $PDO = new ExtendedPdo($this->currentDSN, NULL, NULL, [], [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
            ]);

            return $PDO;
        }

        $this->currentDSN = "{$default['driver']}:host={$default['host']};dbname={$default['database']}";

        $PDO = new PDO(
            $this->currentDSN,
            $default['username'],
            $default['password']
        );

        $PDO->setAttribute(PDO::ATTR_EMULATE_PREPARES, TRUE);
        $PDO->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        $PDO->setAttribute(PDO::ATTR_PERSISTENT, TRUE);
        $PDO->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE, $this->dbFetch);

        # extend using Aura\SQL PDO extension
        $PDO = new ExtendedPdo($PDO);

        return $PDO;
    }

    /**
     * **Describe a table**
     *
     * @param string $tableName
     *
     * @return array
     * @internal param bool $detailed - true returns detailed field description
     *
     */
    public function describe($tableName) : array
    {
        /** @var \PDOStatement $query */
        $query = static::$dbPDO->query("DESCRIBE $tableName");

        return $query->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * **Return the current DSN.**
     *
     * @return string
     */
    public function getCurrentDSN() : string
    {
        return $this->currentDSN;
    }

    /**
     * **Table `delete from` method.**
     *
     * @param string $table
     * @param string $where
     *
     * @return integer Count of affected rows
     */
    public function queryDelete($table, $where) : int
    {
        return static::$dbPDO->exec("delete from $table where $where");
    }

    /**
     * **Wraps table insert queries.**
     *
     * @param string $table A name of table to insert into
     * @param array  $data  An associative array
     *
     * @return bool TRUE if successful, FALSE if not
     */
    public function queryInsert($table, $data) : bool
    {
        ksort($data);

        $fieldNames = implode('`, `', array_keys($data));
        $fieldValues = ':' . implode(', :', array_keys($data));

        /** @var \PDOStatement $result */
        $result = static::$dbPDO->prepare("insert into $table (`$fieldNames`) values ($fieldValues)");
        foreach ($data as $key => $value) {
            $result->bindValue(":$key", $value);
        }

        return $result->execute();
    }

    /**
     * **Return the count of records in a given table.**
     *
     * @param $table_name
     *
     * @return int
     */
    public function queryRecordCount($table_name) : int
    {
        $result = $this->querySelect("select count(*) as records from $table_name");

        if (count($result) > 0) {
            return $result[0]['records'];
        }

        return 0;
    }

    /**
     * **Wraps a SQL query. Uses Prepare to handle variable values safely.**
     *
     * @param string $sql       An SQL string
     * @param array  $fields    Optional parameters to bind
     * @param int    $fetchMode A PDO Fetch mode
     *
     * @return Collection
     */
    public function querySelect($sql, $fields = NULL, $fetchMode = NULL) : Collection
    {
        $result = static::$dbPDO->prepare($sql);

        if ($fields) {
            foreach ($fields as $key => $value) {
                $result->bindValue("$key", $value);
            }
        }

        $result->execute();

        return new Collection($result->fetchAll($fetchMode ?: $this->dbFetch));
    }

    /**
     * **Handles Table Update queries.**
     *
     * @param string $table A name of table to insert into
     * @param array  $data  An associative array
     * @param string $where the WHERE query part
     *
     * @return int number of rows updated
     */
    public function queryUpdate($table, $data, $where) : int
    {
        ksort($data);
        $fieldDetails = '';

        foreach ($data as $key => $value) {
            $fieldDetails .= "`$key`=:$key,";
        }

        $fieldDetails = rtrim($fieldDetails, ',');

        /** @var \PDOStatement $result */
        $result = static::$dbPDO->prepare("update $table set $fieldDetails where $where");

        foreach ($data as $key => $value) {
            $result->bindValue(":$key", $value);
        }

        return $result->execute();
    }

    /**
     * **Gets the list of registered Tables.**
     *
     * @return array - array listing of tables in database
     */
    public function tables() : array
    {
        $tables = NULL;

        // sqlite is a bit different
        if ($this->dbDefault['driver'] === 'sqlite') {
            return $this->getSqliteTables($tables);
        }

        /** @var \PDOStatement $query */
        $query = static::$dbPDO->query('show tables');

        if ($query) {
            $tables = $query->fetchAll(PDO::FETCH_COLUMN);
        }

        return $tables;
    }

    /**
     * Return the current PDO reference.**
     *
     * @return null|PDO
     */
    public static function getPDO() : PDO
    {
        return static::$dbPDO;
    }

    /**
     * @param $tables
     *
     * @return array
     */
    protected function getSqliteTables($tables)
    {
        /** @var \PDOStatement $query */
        $query = static::$dbPDO->query("SELECT name FROM sqlite_master WHERE type='table';");

        while ($table = $query->fetch(SQLITE3_ASSOC)) {
            $tables[] = $table['name'];
        }

        return $tables;
    }

}
